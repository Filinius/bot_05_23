import logging
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
import config
from pandas_processing import PandasCalc

logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot=bot, storage=MemoryStorage())
df = PandasCalc('Data/102.xlsx')


class AuthStates(StatesGroup):
    exercise = State()
    exercise_result = State()


async def on_startup(_):
    pass
    # try:
    #     await db.create_table_user()
    #     logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    # except Exception as e:
    #     logging.exception(e)


async def start_handler(message: types.Message):
    name = message.from_user.full_name
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç {name}!\n–û–Ω–ª–∞–π–Ω –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n "
                         f"–ü–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ\n"
                         f"–ù–§–ü-2013\n"
                         f"–ù–∞–∂–º–∏ /calc, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")


async def auth_exercise(message: types.Message):
    buttons = [
        types.InlineKeyboardButton(text="–ë–µ–≥ –Ω–∞ 100 –º", callback_data="exercise_run_100"),
        types.InlineKeyboardButton(text="–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–∫–ª–∞–¥–∏–Ω–µ", callback_data="exercise_pull_up"),
        types.InlineKeyboardButton(text="–ú–∞—Ä—à-–±—Ä–æ—Å–æ–∫ –Ω–∞ 5 –∫–º", callback_data="exercise_marsh_for_5")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)

    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:", reply_markup=keyboard)

    await AuthStates.exercise.set()


exercise_dict = {
    "run_100": "–±–µ–≥ –Ω–∞ 100 –º",
    "pull_up": "–ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–∫–ª–∞–¥–∏–Ω–µ",
    "marsh_for_5": "–º–∞—Ä—à-–±—Ä–æ—Å–æ–∫ –Ω–∞ 5 –∫–º"
}


async def auth_exercise_callback(callback_query: types.CallbackQuery, state: FSMContext):
    exercise = callback_query.data[9:]
    exercise_d = exercise_dict[exercise]
    await state.update_data(exercise=exercise)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è {exercise_d}")
    await AuthStates.exercise_result.set()


async def auth_exercise_result(message: types.Message, state: FSMContext):
    exercise_result = message.text.strip()
    await state.update_data(exercise_result=exercise_result)
    data = await state.get_data()
    exercise = data['exercise']
    exercise_d = exercise_dict[exercise]
    print(exercise)


    timess = ['run_100', 'marsh_for_5']

    if exercise == 'pull_up':
        try:
            exercise_result = int(message.text.strip())
            exercise_points = df.calc_result_reps(exercise, exercise_result)
        except ValueError:
            await message.answer(f"–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n"
                                 f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è {exercise_d.upper()}."
                                 f"\n<u>–ù–∞–ø—Ä–∏–º–µ—Ä: 15</u>", parse_mode=types.ParseMode.HTML)
            return

    elif exercise in timess:
        try:
            exercise_result = float(exercise_result.strip().replace(",", ".").replace(":", "."))
            exercise_points = df.calc_result_time(exercise, exercise_result)
        except ValueError:
            await message.answer(f"–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n"
                                 f"–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è {exercise_d.upper()} –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞."
                                 f"\n<u>–ù–∞–ø—Ä–∏–º–µ—Ä: 12.25</u>", parse_mode=types.ParseMode.HTML)
            return

    print(exercise_result)
    # point = db.calc_result(exercise)[0]

    print(type(exercise_result))  # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    await message.answer(
        f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:\n{exercise_d.upper()}\n"
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {exercise_result}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: {exercise_points}")
    await state.finish()
    # await state.reset_state(with_data=True)

async def random_text(message:types.Message):
    name = message.from_user.full_name
    await message.answer(f"üëã–ü—Ä–∏–≤–µ—Ç {name}!\n–û–Ω–ª–∞–π–Ω –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n"
                         f"–ü–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ\n"
                         f"–ù–§–ü-2013\n"
                         f"–ù–∞–∂–º–∏ /calc, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")


def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_handler, commands="start")
    dp.register_message_handler(auth_exercise, commands="calc")
    dp.register_callback_query_handler(auth_exercise_callback, lambda c: c.data and c.data.startswith('exercise_'),
                                       state=AuthStates.exercise)
    dp.register_message_handler(auth_exercise_result, state=AuthStates.exercise_result)
    dp.register_message_handler(random_text)


if __name__ == '__main__':
    register_handlers(dp=dp)
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
